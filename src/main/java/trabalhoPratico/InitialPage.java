/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabalhoPratico;

import java.awt.FileDialog;
import java.awt.Frame;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
import trabalhoPratico.Utils;
import static trabalhoPratico.Utils.ByteArrayToString;
import static trabalhoPratico.Utils.removeExtension;

/**
 *
 * @author jmfer
 */
public class InitialPage extends javax.swing.JFrame {

    File inputFile;
    File encryptedFile;
    File decryptedFile;
    File senderPublickeyFile;
    File signaturesFile;
    File reciverPublicKeyFile;
    File symetricKeyEncryptedFile;
    File ivSpecFile;
    
    File[] fileToSelect;
    String filePath;
    String fileName;
    /**
     * Creates new form InitialPage
     */
    public InitialPage() {
        initComponents();

        //inputFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\");
        //encryptedFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\Encriptados\\ficheiro.encrypted");
        decryptedFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\Decriptados\\ficheiro.decrypted");
        senderPublickeyFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\SenderPublicKey.txt");
        signaturesFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\Signatures.txt");
        reciverPublicKeyFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\ReciverPublicKey.txt");
        symetricKeyEncryptedFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\SymetricKeyEncrypted.txt");
        ivSpecFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\IvSpec.txt");
        encryptButton.show(false);
        signFileButton.show(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        encryptButton = new javax.swing.JButton();
        signFileButton = new javax.swing.JButton();
        selecionaFicheiroButton = new javax.swing.JButton();
        fileLabel = new javax.swing.JLabel();
        filesLabel = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gest√£o de Ficheiros");

        jButton1.setText("Criar Rar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openRARWindow(evt);
            }
        });

        encryptButton.setText("Encriptar");
        encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encryptButtonActionPerformed(evt);
            }
        });

        signFileButton.setText("Assinar Ficheiro");
        signFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signFileButtonActionPerformed(evt);
            }
        });

        selecionaFicheiroButton.setText("Selecionar Ficheiro");
        selecionaFicheiroButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selecionaFicheiroButtonActionPerformed(evt);
            }
        });

        filesLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addComponent(fileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(114, 114, 114))
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selecionaFicheiroButton, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                    .addComponent(encryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(signFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(filesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(selecionaFicheiroButton)
                .addGap(26, 26, 26)
                .addComponent(filesLabel)
                .addGap(18, 18, 18)
                .addComponent(fileLabel)
                .addGap(18, 18, 18)
                .addComponent(encryptButton)
                .addGap(18, 18, 18)
                .addComponent(signFileButton)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void signFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signFileButtonActionPerformed
        
            if(encryptedFile == null){
                JOptionPane.showMessageDialog(null, "Encripte o ficheiro primeiro", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            
        try {
            KeyPairGenerator kpGen = KeyPairGenerator.getInstance("RSA");
            kpGen.initialize(4096);
            KeyPair keyPair = kpGen.generateKeyPair();
            
            printByArray("Sender Private Key: ", keyPair.getPrivate().getEncoded());
            printByArray("Sender Public Key: ", keyPair.getPublic().getEncoded());
                   
            FileInputStream inputStream = new FileInputStream(encryptedFile);
            byte[] inputBytes = new byte[(int) encryptedFile.length()];
            inputStream.read(inputBytes);
            
            
            // Envia para o ficheiro a chave publica do sender
            FileOutputStream writeSenderPublicKeyStream = new FileOutputStream(senderPublickeyFile);
            writeSenderPublicKeyStream.write(keyPair.getPublic().getEncoded());
            
            Signature signatureAlgorithm = Signature.getInstance("SHA256WITHRSA");
            signatureAlgorithm.initSign(keyPair.getPrivate());
            signatureAlgorithm.update(inputBytes);
            
            byte[] signature = signatureAlgorithm.sign();
            printByArray("Signature: ", signature);
            
            // Escreve assinatura no ficheiro
            FileOutputStream writeSignatureStream = new FileOutputStream(signaturesFile);
            writeSignatureStream.write(signature);
            
            JOptionPane.showMessageDialog(null, "Ficheiro assinado com sucesso!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            
            writeSignatureStream.close();
            writeSenderPublicKeyStream.close();
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SignatureException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_signFileButtonActionPerformed

    private void openRARWindow(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openRARWindow
        RarPage page = new RarPage(this);
        page.show();
        dispose();
    }//GEN-LAST:event_openRARWindow

    private void encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encryptButtonActionPerformed

        try {                                              
            
            String symetricKey = "AAAAAAAAAAAAAAAA";
            KeyGenerator generator = KeyGenerator.getInstance("AES");     
            generator.init(128); //keysize
            Key key = generator.generateKey();            
            
            // Ler ficheiro chave publica do reciver
            FileInputStream reciverPublicKeyStream = new FileInputStream(reciverPublicKeyFile);           
            byte[] publicKeyBytes = new byte[(int) reciverPublicKeyFile.length()];
            reciverPublicKeyStream.read(publicKeyBytes);
            
            String reciverPublicKeyText = ByteArrayToString(publicKeyBytes);
            System.out.println("Reciver Public Key: " + reciverPublicKeyText);
            
            // Simula a chave publica do reciver a partir da que esta no ficheiro    
            X509EncodedKeySpec spec = new X509EncodedKeySpec(publicKeyBytes);
            KeyFactory fact = KeyFactory.getInstance("RSA");
            PublicKey reciverPublicKey = fact.generatePublic(spec);
            
            
            // Encriptar chave sim√©trica
            byte[] keyText = key.getEncoded();
                       
            Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWITHSHA-512ANDMGF1PADDING");
            cipher.init(Cipher.ENCRYPT_MODE, reciverPublicKey);
            
            byte[] encryptedSymetricKeyText = cipher.doFinal(keyText);
            
            // Escrever a chave sim√©trica encriptada no ficheiro
            FileOutputStream writeEncryptedSymetricKeyStream = new FileOutputStream(symetricKeyEncryptedFile);
            writeEncryptedSymetricKeyStream.write(encryptedSymetricKeyText);
            
            inputFile = new File(filePath);
            encryptedFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\Encriptados\\" + removeExtension(fileName) + ".encrypted");
            
            
            doEncryptionOrDecryption(Cipher.ENCRYPT_MODE, inputFile, encryptedFile, key);
            JOptionPane.showMessageDialog(null, "Ficheiro encriptado com sucesso!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            
            reciverPublicKeyStream.close();
            writeEncryptedSymetricKeyStream.close();
                
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidAlgorithmParameterException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_encryptButtonActionPerformed

    private void selecionaFicheiroButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selecionaFicheiroButtonActionPerformed
        
        FileDialog diag = new FileDialog((Frame) null, "Escolha um ficheiro", FileDialog.LOAD);
        diag.setMultipleMode(false);
        diag.setVisible(true);

        fileToSelect = diag.getFiles();
        for (File file : fileToSelect) {
            fileName = file.getName();
            System.out.println(file.getName());
            System.out.println(file.getAbsolutePath());
            filePath = file.getAbsolutePath();
            filesLabel.setText(file.getName());
        }
        
        encryptButton.show(true);
        signFileButton.show(true);
    }//GEN-LAST:event_selecionaFicheiroButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitialPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitialPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitialPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitialPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitialPage().setVisible(true);
            }
        });
    }

    public void doEncryptionOrDecryption(int cipherMode, File inputFile, File outputFile, Key key) throws InvalidAlgorithmParameterException {

        try {

            //KeyGenerator generator = KeyGenerator.getInstance("AES");
            //generator.init(128); //keysize
            //Key key = generator.generateKey();
            //Key key = new SecretKeySpec(cipherKey.getBytes(), "AES");

            System.out.println("Chave: " + ByteArrayToString(key.getEncoded()));

            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            byte[] ivSpecVector = new byte[16];
            secureRandom.nextBytes(ivSpecVector);

            //Arrays.fill(ivSpecVector, (byte) 1);
    
            IvParameterSpec ivSpec = new IvParameterSpec(ivSpecVector);
            printByArray("ivSpec: ", ivSpec.getIV());

            // Escrever o ivSpec no ficheiro
            FileOutputStream outputStreamIvSpec = new FileOutputStream(ivSpecFile);           
            outputStreamIvSpec.write(ivSpecVector);
            
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");

            //ficheiro input
            FileInputStream inputStream = new FileInputStream(inputFile);
            byte[] inputBytes = new byte[(int) inputFile.length()];
            inputStream.read(inputBytes);

            //encrita√ßao
            cipher.init(cipherMode, key, ivSpec);
            byte[] outputBytes = cipher.doFinal(inputBytes);

            FileOutputStream outputStream = new FileOutputStream(outputFile);
            outputStream.write(outputBytes);

            inputStream.close();
            outputStream.close();
            outputStreamIvSpec.close();

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static void printByArray(String s, byte[] array) {

        StringBuilder sb = new StringBuilder();
        for (byte b : array) {
            sb.append(String.format("%02x", b));
        }

        System.out.println(s + sb.toString());
        System.out.println("Tamanho:" + array.length * 8 + " bits");
    }

     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton encryptButton;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JLabel filesLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton selecionaFicheiroButton;
    private javax.swing.JButton signFileButton;
    // End of variables declaration//GEN-END:variables
}
