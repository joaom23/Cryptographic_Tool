/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package verificacaoFicheiro;

import java.awt.FileDialog;
import java.awt.Frame;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.security.GeneralSecurityException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
import trabalhoPratico.InitialPage;
import static trabalhoPratico.InitialPage.printByArray;
import static trabalhoPratico.Utils.ByteArrayToString;
import static trabalhoPratico.Utils.removeExtension;


/**
 *
 * @author jmfer
 */
public class Verifica extends javax.swing.JFrame {

    File encryptedFile;
    File decryptedFile;
    File senderPublicKeyFile;
    File signaturesFile;
    File reciverPrivateKeyFile;
    File reciverPublicKeyFile;
    File symetricKeyEncryptedFile;
    File ivSpecFile;
    
    File[] fileToSelect;
    String encryptedFilePath;
    String encryptedFileName;
    
    public Verifica() throws IOException, NoSuchAlgorithmException, NoSuchAlgorithmException {
        initComponents();
        //encryptedFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\Encriptados\\ficheiro.encrypted");
        //decryptedFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\Decriptados\\ficheiro.decrypted");
        senderPublicKeyFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\SenderPublicKey.txt");
        signaturesFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\Signatures.txt");
        reciverPrivateKeyFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\ReciverPrivateKey.txt");
        reciverPublicKeyFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\ReciverPublicKey.txt");
        symetricKeyEncryptedFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\SymetricKeyEncrypted.txt");
        ivSpecFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\IvSpec.txt");
        
        verificaButton.show(false);
        decryptButton.show(false);
        
        if(checkIfReciverKeysFilesAreEmpty()){
            generateKeyPairs();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        verificaButton = new javax.swing.JButton();
        decryptButton = new javax.swing.JButton();
        selectFileButton = new javax.swing.JButton();
        fileLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Verificar Ficheiro");

        verificaButton.setText("Verificar Ficheiro");
        verificaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verificaButtonActionPerformed(evt);
            }
        });

        decryptButton.setText("Desencriptar");
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        selectFileButton.setText("Selecionar Ficheiro");
        selectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileButtonActionPerformed(evt);
            }
        });

        fileLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(131, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(fileLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(verificaButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(decryptButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(140, 140, 140))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(selectFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addComponent(fileLabel)
                .addGap(40, 40, 40)
                .addComponent(verificaButton)
                .addGap(18, 18, 18)
                .addComponent(decryptButton)
                .addGap(64, 64, 64))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private boolean checkIfReciverKeysFilesAreEmpty() throws FileNotFoundException, IOException{
        
        // Verifica se os ficheiros das chaves estão vazios, se não estiverem retorna true
        FileInputStream reciverPubicKeyStream = new FileInputStream(reciverPublicKeyFile);
        byte[] readsizePublic = reciverPubicKeyStream.readAllBytes();
        
        FileInputStream reciverPrivateKeyStream = new FileInputStream(reciverPrivateKeyFile); 
        byte[] readsizePrivate = reciverPrivateKeyStream.readAllBytes();
        
        if(readsizePublic.length == 0 && readsizePrivate.length == 0){
            System.out.println("Ficheiros estão vazios! Gerar chaves");
            return true;         
        }       
        System.out.println("Ficheiros não estão vazios!");
        return false;
    }
    
    private void generateKeyPairs() throws NoSuchAlgorithmException, FileNotFoundException, IOException{
        
        KeyPairGenerator kpGen = KeyPairGenerator.getInstance("RSA");
        kpGen.initialize(4096);
        KeyPair keyPair = kpGen.generateKeyPair();
        
        // Escrever chaves nos respetivos ficheiros
        FileOutputStream writePubicKeyStream = new FileOutputStream(reciverPublicKeyFile);
        writePubicKeyStream.write(keyPair.getPublic().getEncoded());
        
        FileOutputStream writePrivateKeyStream = new FileOutputStream(reciverPrivateKeyFile);
        writePrivateKeyStream.write(keyPair.getPrivate().getEncoded());
        
    }   
    private void verificaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verificaButtonActionPerformed

        try {
            Signature verificationAlgorithm = Signature.getInstance("SHA256WITHRSA");
            
            encryptedFile = new File(encryptedFilePath);
            
            // Ler ficheiro encriptado
            FileInputStream encryptedFileStream = new FileInputStream(encryptedFile);           
            byte[] encryptedFileBytes = new byte[(int) encryptedFile.length()];
            encryptedFileStream.read(encryptedFileBytes);
            
            // Ler ficheiro da assinatura
            FileInputStream signatureStream = new FileInputStream(signaturesFile);           
            byte[] signatureBytes = new byte[(int) signaturesFile.length()];
            signatureStream.read(signatureBytes);
            
            String signatureText = ByteArrayToString(signatureBytes);
            System.out.println("Signature: " + signatureText);
                      
            // Ler ficheiro chave da chave publica do sender
            FileInputStream senderPublicKeyStream = new FileInputStream(senderPublicKeyFile);           
            byte[] senderPublicKeyBytes = new byte[(int) senderPublicKeyFile.length()];
            senderPublicKeyStream.read(senderPublicKeyBytes);
                            
            // Simula a chave publica do sender a partir da que esta no ficheiro    
            X509EncodedKeySpec spec = new X509EncodedKeySpec(senderPublicKeyBytes);
            KeyFactory fact = KeyFactory.getInstance("RSA");
            PublicKey senderPublicKey = fact.generatePublic(spec);
            
            printByArray("Sender Public Key: ", senderPublicKey.getEncoded());
            printByArray("Signature: ", signatureBytes);
            
            // Verifica a integridade e autenticidade do ficheiro com a chave publica do sender
            verificationAlgorithm.initVerify(senderPublicKey);
            verificationAlgorithm.update(encryptedFileBytes);
           
            boolean matches = verificationAlgorithm.verify(signatureBytes);
            System.out.println("Signature matches: " + matches);
            
            if(matches){
                
                JOptionPane.showMessageDialog(null, "Autenticidade e Integridade confirmadas!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
                
            }else{
                JOptionPane.showMessageDialog(null, "Ficheiro corrompido!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);    
            }
            
            encryptedFileStream.close();
            signatureStream.close();
            senderPublicKeyStream.close();
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SignatureException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_verificaButtonActionPerformed

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
              
        try {
                        
            // Ler ficheiro chave simétrica que foi encriptada com a sua chave publica           
            FileInputStream encryptedSymetricKeyStream = new FileInputStream(symetricKeyEncryptedFile);           
            byte[] encryptedSymetricKeyBytes = new byte[(int) symetricKeyEncryptedFile.length()];
            encryptedSymetricKeyStream.read(encryptedSymetricKeyBytes);
            
            // Ler ficheiro da sua chave privada para desencriptar a chave simétrica           
            FileInputStream reciverPrivateKeyStream = new FileInputStream(reciverPrivateKeyFile);           
            byte[] reciverPrivateKeyBytes = new byte[(int) reciverPrivateKeyFile.length()];
            reciverPrivateKeyStream.read(reciverPrivateKeyBytes);
            
            // Simula a chave privada a partir da que esta no ficheiro     
            PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(reciverPrivateKeyBytes);
            KeyFactory fact = KeyFactory.getInstance("RSA");
            PrivateKey reciverPrivateKey = fact.generatePrivate(spec);
            
            // Desencriptar chave simétrica
            Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWITHSHA-512ANDMGF1PADDING");
            cipher.init(Cipher.DECRYPT_MODE, reciverPrivateKey);            
            byte[] symetricKeyBytes = cipher.doFinal(encryptedSymetricKeyBytes);           
            
            SecretKeySpec secretKeySpec = new SecretKeySpec(symetricKeyBytes, "AES");
            
            
            // Converter a chave simétrica para string (questões de debug)
            String symetricKeyString = new String(symetricKeyBytes, StandardCharsets.UTF_8);
            
            encryptedFile = new File(encryptedFilePath);
            decryptedFile = new File("C:\\Users\\jmfer\\OneDrive\\Ambiente de Trabalho\\Criptografia\\Trabalho\\Decriptados\\" + removeExtension(encryptedFileName) + ".decrypted");
            
            doEncryptionOrDecryption(Cipher.DECRYPT_MODE, encryptedFile, decryptedFile, secretKeySpec);  
            
            JOptionPane.showMessageDialog(null, "Ficheiro desencriptado com sucesso!", "Mensagem", JOptionPane.INFORMATION_MESSAGE);
            
            encryptedSymetricKeyStream.close();
            reciverPrivateKeyStream.close();
            
        } catch (InvalidAlgorithmParameterException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeySpecException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_decryptButtonActionPerformed

    private void selectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFileButtonActionPerformed
       FileDialog diag = new FileDialog((Frame) null, "Escolha um ficheiro", FileDialog.LOAD);
        diag.setMultipleMode(false);
        diag.setVisible(true);

        fileToSelect = diag.getFiles();
        for (File file : fileToSelect) {
            encryptedFileName = file.getName();
            System.out.println(file.getName());
            System.out.println(file.getAbsolutePath());
            encryptedFilePath = file.getAbsolutePath();
            fileLabel.setText(file.getName());
        }
        
        decryptButton.show(true);
        verificaButton.show(true);
    }//GEN-LAST:event_selectFileButtonActionPerformed
    
    public void doEncryptionOrDecryption(int cipherMode, File inputFile, File outputFile, Key key) throws InvalidAlgorithmParameterException {

        try {
            //Key key = new SecretKeySpec(cipherKey.getBytes(), "AES");

            System.out.println("Chave: " + ByteArrayToString(key.getEncoded()));

            //SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
            //byte[] random = new byte[16];
            //secureRandom.nextBytes(random);

            //Arrays.fill(random, (byte) 1);
            
            // Ler o ivSpec do ficherio
            FileInputStream inputStreamIvSpec = new FileInputStream(ivSpecFile);
            byte[] ivSpecVector = new byte[16];
            inputStreamIvSpec.read(ivSpecVector);
            
            //ivSpecVector = trimZeros(ivSpecVector);
            
            IvParameterSpec ivSpec = new IvParameterSpec(ivSpecVector);
            printByArray("ivSpec: ", ivSpec.getIV());

            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");

            //ficheiro input
            FileInputStream inputStream = new FileInputStream(inputFile);
            byte[] inputBytes = new byte[(int) inputFile.length()];
            inputStream.read(inputBytes);

            //desencriptação
            cipher.init(cipherMode, key, ivSpec);
            byte[] outputBytes = cipher.doFinal(inputBytes);

            FileOutputStream outputStream = new FileOutputStream(outputFile);
            outputStream.write(outputBytes);

            inputStream.close();
            outputStream.close();
            inputStreamIvSpec.close();
            
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(InitialPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Verifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Verifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Verifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Verifica.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Verifica().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(Verifica.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton decryptButton;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JButton selectFileButton;
    private javax.swing.JButton verificaButton;
    // End of variables declaration//GEN-END:variables
}
